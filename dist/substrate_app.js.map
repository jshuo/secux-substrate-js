{"version":3,"file":"substrate_app.js","sourceRoot":"","sources":["../src/substrate_app.ts"],"names":[],"mappings":"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","sourcesContent":["/** ******************************************************************************\n *  (c) 2019 - 2022 ZondaX AG\n *  (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ******************************************************************************* */\nimport { buildPathBuffer } from '@secux/utility'\nimport { ITransport } from '@secux/transport';\nimport {\n  CHUNK_SIZE,\n  getVersion,\n  processErrorResponse,\n  ResponseVersion,\n  SCHEME,\n} from './common'\n\nimport { ed25519 } from '@noble/curves/ed25519';\n\nconst toHexString = (bytes:Uint8Array) => {\n  return Array.from(bytes, (byte) => {\n    return ('0' + (byte & 0xff).toString(16)).slice(-2);\n  }).join('');\n};\n\nexport class SubstrateApp {\n  transport: ITransport\n  cla: number\n  slip0044: number\n\n  constructor(transport: ITransport, cla: number, slip0044: number) {\n    if (!transport) {\n      throw new Error('Transport has not been defined')\n    }\n    this.transport = transport\n    this.cla = cla\n    this.slip0044 = slip0044\n  }\n\n  static serializePath(slip0044: number, account: number, change: number, addressIndex: number) {\n    if (!Number.isInteger(account)) throw new Error('Input must be an integer')\n    if (!Number.isInteger(change)) throw new Error('Input must be an integer')\n    if (!Number.isInteger(addressIndex)) throw new Error('Input must be an integer')\n\n    const buf = Buffer.alloc(20)\n    buf.writeUInt32LE(0x8000002c, 0)\n    buf.writeUInt32LE(slip0044, 4)\n    buf.writeUInt32LE(account, 8)\n    buf.writeUInt32LE(change, 12)\n    buf.writeUInt32LE(addressIndex, 16)\n    return buf\n  }\n  static GetChunks(message: Buffer) {\n    const chunks = []\n    const buffer = Buffer.from(message)\n\n    for (let i = 0; i < buffer.length; i += CHUNK_SIZE) {\n      let end = i + CHUNK_SIZE\n      if (i > buffer.length) {\n        end = buffer.length\n      }\n      chunks.push(buffer.slice(i, end))\n    }\n\n    return chunks\n  }\n\n  static signGetChunks(slip0044: number, account: number, change: number, addressIndex: number, message: Buffer) {\n    const chunks = []\n    const bip44Path = SubstrateApp.serializePath(slip0044, account, change, addressIndex)\n    chunks.push(bip44Path)\n    chunks.push(...SubstrateApp.GetChunks(message))\n    return chunks\n  }\n\n  async getVersion(): Promise<ResponseVersion> {\n    try {\n      return await getVersion(this.transport, this.cla)\n    } catch (e) {\n      return processErrorResponse(e)\n    }\n  }\n\n  async appInfo() {  }\n\n  async signSendChunk(chunkIdx: number, chunkNum: number, chunk: any, scheme = SCHEME.ED25519) {\n    // let payloadType = PAYLOAD_TYPE.ADD\n    // if (chunkIdx === 1) {\n    //   payloadType = PAYLOAD_TYPE.INIT\n    // }\n    // if (chunkIdx === chunkNum) {\n    //   payloadType = PAYLOAD_TYPE.LAST\n    // }\n\n    let p2 = 0\n    if (!isNaN(scheme)) p2 = scheme\n\n    return this.transport.Send(0x70, 0xa3, 0, 0, chunk).then(response => {\n      // const errorCodeData = response.slice(-2)\n      // const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n      // let errorMessage = errorCodeToString(returnCode)\n      let signature = null\n\n      // if (returnCode === 0x6a80 || returnCode === 0x6984) {\n      //   errorMessage = response.slice(0, response.length - 2).toString('ascii')\n      // } else if (response.length > 2) {\n      //   signature = response.slice(0, response.length - 2)\n      // }\n\n      return {\n        signature,\n        // return_code: returnCode,\n        // error_message: errorMessage,\n      }\n    }, processErrorResponse)\n  }\n\n  async getAddress(\n    account: number,\n    change: number,\n    addressIndex: number,\n    requireConfirmation = false,\n    scheme = SCHEME.ED25519,\n  ){\n\n    let ellipticCurve = 1\n    // const bip44Path = SubstrateApp.serializePath(this.slip0044, account, change, addressIndex)\n    const { pathBuffer } = buildPathBuffer(\"m/44'/643'/0'\")\n    // const { pathBuffer } = buildPathBuffer(\"m/44/354/0/0/0\")\n    const pubKey = await this.transport.Send(0x80, 0xc0, ellipticCurve, 0,  pathBuffer)\n    console.log(pubKey.data.toString('hex'))\n    return {\n      pubKey: '3bfe44ad5419cca66549ed49608be9ca79ab08baa8c71b31106d292dc3279afd',\n      address: '5DRNDUF3A1p465yaatWtidDiFjgcs8iLKTQX8xxYaMgVdSdU'\n    }\n  }\n\n  async sign(account: number, change: number, addressIndex: number, message: Buffer, scheme = SCHEME.ED25519) {\n    const chunks = SubstrateApp.signGetChunks(this.slip0044, account, change, addressIndex, message)\n\n    const privKey = new Uint8Array([\n      16,  18, 137, 159,  79, 193, 178, 101,\n      56, 111,  51,  20,  75, 158,  55,  76,\n      41, 108,  21, 182, 171,  39,  79, 116,\n     148, 242, 169, 236,  44, 230, 157,  65\n    ])\n     const signature: Uint8Array = ed25519.sign(chunks[1], privKey)\n     const typedSignature = new Uint8Array(signature.length+1)\n     typedSignature.set(signature, 1);\n     typedSignature[0] = 0 // ed25519 \n    return toHexString(typedSignature)\n\n    // return this.signSendChunk(1, chunks.length, chunks[0], scheme).then(async () => {\n    //   let result\n    //   for (let i = 1; i < chunks.length; i += 1) {\n    //     result = await this.signSendChunk(1 + i, chunks.length, chunks[i], scheme)\n    //     // if (result.return_code !== ERROR_CODE.NoError) {\n    //     //   break\n    //     // }\n    //   }\n\n    //   return {\n    //     return_code: result.return_code,\n    //     error_message: result.error_message,\n    //     signature: result.signature,\n    //   }\n    // }, processErrorResponse)\n\n    // const signature = 'null'\n    // return { signature }\n  }\n\n}\n"]}